x <- 5
x <- c(1,2,3,4,5)
class(z)
class(x)
length(x)
1:4 .+ 1:4
(1:4) .+ (1:4)
x
x[x <= 12]
x[x <= 3]
source("Academic/Stats202a/Assignments/Assignment_1/practice.R")
piFun(3)
cosFun(c(1,2))
v = run i f ( 5 , min = 0 , max = 1 )
v = runif( 5 , min = 0 , max = 1 )
v
runif
help(runif)
#############################################################
## Stat 202A - Homework 2
## Author:
## Date :
## Description: This script implements ridge regression as
## well as piecewise linear spline regression.
#############################################################
#############################################################
## INSTRUCTIONS: Please fill in the missing lines of code
## only where specified. Do not change function names,
## function inputs or outputs. You can add examples at the
## end of the script (in the "Optional examples" section) to
## double-check your work, but MAKE SURE TO COMMENT OUT ALL
## OF YOUR EXAMPLES BEFORE SUBMITTING.
##
## Very important: Do not use the function "setwd" anywhere
## in your code. If you do, I will be unable to grade your
## work since R will attempt to change my working directory
## to one that does not exist.
#############################################################
#################################
## Function 1: Sweep operation ##
#################################
mySweep <- function(A, m){
# Perform a SWEEP operation on A with the pivot element A[m,m].
#
# A: a square matrix.
# m: the pivot element is A[m, m].
# Returns a swept matrix.
## Leave this function as is unless you want to make it
## more efficient!
n <- nrow(A)
for(k in 1:m){
for(i in 1:n)
for(j in 1:n)
if(i != k  & j != k)
A[i,j] <- A[i,j] - A[i,k]*A[k,j]/A[k,k]
for(i in 1:n)
if(i != k)
A[i,k] <- A[i,k]/A[k,k]
for(j in 1:n)
if(j != k)
A[k,j] <- A[k,j]/A[k,k]
A[k,k] <- - 1/A[k,k]
}
return(A)
}
##################################
## Function 2: Ridge regression ##
##################################
myRidge <- function(X, Y, lambda){
# Perform ridge regression of Y on X.
#
# X: a matrix of explanatory variables.
# Y: a vector of dependent variables. Y can also be a
# matrix, as long as the function works.
# lambda: regularization parameter (lambda >= 0)
# Returns beta, the ridge regression solution.
##################################
## FILL IN THIS SECTION OF CODE ##
##################################
n = dim(X)[1]
p = dim(X)[2]
Z = cbind(rep(1, n), X, Y)
A = t(Z) %*% Z
D = diag(rep(lambda, p + 2))
D[p+2, p+2] = 0
D[1,1] = 0
A = A + D
S = mySweep(A, p + 1)
beta_ridge = S[1:(p+1), p+2]
## Function should output the vector beta_ridge, the
## solution to the ridge regression problem. Beta_ridge
## should have p + 1 elements.
return(beta_ridge)
}
##############################################################
## Optional function (not graded, just for testing myRidge) ##
##############################################################
testRidge <- function(){
## You can edit this function however you like (or not at all).
## I just included it here to help you check if your ridge
## function is working properly.
## Load up "trees" data
my.data <- trees
## Let X be the Girth and Height of trees
## X needs to be a matrix
X <- as.matrix(trees[,1:2])
## Let Y be the Volume of the tree
Y <- trees$Volume
## Compare ridge solution when lambda = 0 to ordinary linear regression
beta_ls    <- lm(Volume ~ Girth + Height, data = my.data)$coeff
beta_ridge <- myRidge(X, Y, 0)
if(sum(beta_ridge - beta_ls) <= 10^(-5))
cat("Looks like myRidge is working properly when lambda = 0! \n")
## You can test around some more
}
testRidge()
####################################################
## Function 3: Piecewise linear spline regression ##
####################################################
## Might want to hold off on this function until Tuesdays
## lecture.
mySpline <- function(X, Y, lambda, p = 100){
# Perform spline regression of Y on X.
#
# X: An n x 1 matrix of explanatory variables (n is sample size).
# Y: An n x 1 vector of dependent variables. Y can also be a
# matrix, as long as the function works.
# lambda: regularization parameter (lambda >= 0)
# p: Number of cuts to make to the x-axis.
##################################
## FILL IN THIS SECTION OF CODE ##
##################################
print("Starting Spline")
for(k in (1:(p-1))/p){
print(k)
X = cbind(X, (X > k) * (X - k))
}
beta_spline = myRidge(X, Y, lambda)
y.hat = cbind(rep(1, n), X) %*% beta_spline
## Function should return a list containing two elements:
## The first element of the list is the spline regression
## beta vector, which should be p + 1 dimensional (here,
## p is the number of cuts we made to the x-axis).
## The second element is y.hat, the predicted Y values
## using the spline regression beta vector. This
## can be a numeric vector or matrix.
output <- list(beta_spline = beta_spline, predicted_y = y.hat)
return(output)
}
n = 10
p = 10
sigma = 0.1
lambda = 10
X = sort(runif(n))
Y = X^2 + rnorm(n) * sigma
output = mySpline(X, Y, lambda, p)
clear()
clr()
#############################################################
## Stat 202A - Homework 2
## Author:
## Date :
## Description: This script implements ridge regression as
## well as piecewise linear spline regression.
#############################################################
#############################################################
## INSTRUCTIONS: Please fill in the missing lines of code
## only where specified. Do not change function names,
## function inputs or outputs. You can add examples at the
## end of the script (in the "Optional examples" section) to
## double-check your work, but MAKE SURE TO COMMENT OUT ALL
## OF YOUR EXAMPLES BEFORE SUBMITTING.
##
## Very important: Do not use the function "setwd" anywhere
## in your code. If you do, I will be unable to grade your
## work since R will attempt to change my working directory
## to one that does not exist.
#############################################################
#################################
## Function 1: Sweep operation ##
#################################
mySweep <- function(A, m){
# Perform a SWEEP operation on A with the pivot element A[m,m].
#
# A: a square matrix.
# m: the pivot element is A[m, m].
# Returns a swept matrix.
## Leave this function as is unless you want to make it
## more efficient!
n <- nrow(A)
for(k in 1:m){
print(k)
for(i in 1:n)
for(j in 1:n)
if(i != k  & j != k)
A[i,j] <- A[i,j] - A[i,k]*A[k,j]/A[k,k]
for(i in 1:n)
if(i != k)
A[i,k] <- A[i,k]/A[k,k]
for(j in 1:n)
if(j != k)
A[k,j] <- A[k,j]/A[k,k]
A[k,k] <- - 1/A[k,k]
}
return(A)
}
##################################
## Function 2: Ridge regression ##
##################################
myRidge <- function(X, Y, lambda){
# Perform ridge regression of Y on X.
#
# X: a matrix of explanatory variables.
# Y: a vector of dependent variables. Y can also be a
# matrix, as long as the function works.
# lambda: regularization parameter (lambda >= 0)
# Returns beta, the ridge regression solution.
##################################
## FILL IN THIS SECTION OF CODE ##
##################################
n = dim(X)[1]
p = dim(X)[2]
Z = cbind(rep(1, n), X, Y)
A = t(Z) %*% Z
D = diag(rep(lambda, p + 2))
D[p+2, p+2] = 0
D[1,1] = 0
A = A + D
S = mySweep(A, p + 1)
beta_ridge = S[1:(p+1), p+2]
## Function should output the vector beta_ridge, the
## solution to the ridge regression problem. Beta_ridge
## should have p + 1 elements.
return(beta_ridge)
}
##############################################################
## Optional function (not graded, just for testing myRidge) ##
##############################################################
testRidge <- function(){
## You can edit this function however you like (or not at all).
## I just included it here to help you check if your ridge
## function is working properly.
## Load up "trees" data
my.data <- trees
## Let X be the Girth and Height of trees
## X needs to be a matrix
X <- as.matrix(trees[,1:2])
## Let Y be the Volume of the tree
Y <- trees$Volume
## Compare ridge solution when lambda = 0 to ordinary linear regression
beta_ls    <- lm(Volume ~ Girth + Height, data = my.data)$coeff
beta_ridge <- myRidge(X, Y, 0)
if(sum(beta_ridge - beta_ls) <= 10^(-5))
cat("Looks like myRidge is working properly when lambda = 0! \n")
## You can test around some more
}
testRidge()
####################################################
## Function 3: Piecewise linear spline regression ##
####################################################
## Might want to hold off on this function until Tuesdays
## lecture.
mySpline <- function(X, Y, lambda, p = 100){
# Perform spline regression of Y on X.
#
# X: An n x 1 matrix of explanatory variables (n is sample size).
# Y: An n x 1 vector of dependent variables. Y can also be a
# matrix, as long as the function works.
# lambda: regularization parameter (lambda >= 0)
# p: Number of cuts to make to the x-axis.
##################################
## FILL IN THIS SECTION OF CODE ##
##################################
print("Starting Spline")
for(k in (1:(p-1))/p){
print(k)
X = cbind(X, (X > k) * (X - k))
}
beta_spline = myRidge(X, Y, lambda)
y.hat = cbind(rep(1, n), X) %*% beta_spline
## Function should return a list containing two elements:
## The first element of the list is the spline regression
## beta vector, which should be p + 1 dimensional (here,
## p is the number of cuts we made to the x-axis).
## The second element is y.hat, the predicted Y values
## using the spline regression beta vector. This
## can be a numeric vector or matrix.
output <- list(beta_spline = beta_spline, predicted_y = y.hat)
return(output)
}
n = 10
p = 10
sigma = 0.1
lambda = 10
X = sort(runif(n))
Y = X^2 + rnorm(n) * sigma
output = mySpline(X, Y, lambda, p)
source('~/.active-rstudio-document')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
(1:9)/10
source('~/Untitled.R')
print(dim(X))
source('~/Untitled.R')
source('~/Untitled.R')
X
copy(X)
x = X
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
c(0,5,100)
seq(0, 100, by=5)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Academic/Stats202a/Assignments/A3/Ridge.R')
source('~/Academic/Stats202a/Assignments/A3/Ridge.R')
source('~/Academic/Stats202a/Assignments/A3/Ridge.R')
source('~/Academic/Stats202a/Assignments/A3/Ridge.R')
source('~/Academic/Stats202a/Assignments/A3/Ridge.R')
source('~/Academic/Stats202a/Assignments/A3/Ridge.R')
source('~/Academic/Stats202a/Assignments/A3/Ridge.R')
source('~/Academic/Stats202a/Assignments/A3/Ridge.R')
rep(0, 50)
c(rep(0,50))
install.packages("rcpp")
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
print(R[k:n,k])
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
library(Rcpp)
sourceCpp("SweepAndQR.cpp")
pwd9)
pwd()
cwd()
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
A = matrix(rnorn(100), nrow=10)
A = matrix(rnorm(100), nrow=10)
myQR(A)
A
myQR(A)
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
myQRC(A)
A
QR(A)
myQR(A)
A = matrix(runif(25), 5, 5)
A
myQR(A)
myQRC(A)
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
A = matrix(10000, 100, 100)
ptm = proc.time()
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
print("Execution time for N=$i")
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
plot(c(100,200,300,400,500), c(3.890, 4.172, 4.598, 5.766, 6.511))
plot(c(100,200,300,400,500), c(3.890, 4.172, 4.598, 5.766, 6.511), xlab="Dataset Size", ylab="Seconds(s)")
plot(c(100,200,300,400,500), c(3.890, 4.172, 4.598, 5.766, 6.511), xlab="Dataset Size", ylab="Seconds(s)", type="l")
plot(c(100,200,300,400,500), c(3.890, 4.172, 4.598, 5.766, 6.511), xlab="Dataset Size", ylab="Seconds(s)", type="l", col="red")
source('~/Academic/Stats202a/Assignments/A7/QR.r')
plot(c(100,200,300,400,500,600), c(0.031, 0.189, 0.518, 1.513, 4.465), xlab="Dataset Size", ylab="Seconds(s)", type="l", col="red", main=”Plot for runtimes, R vs Cpp”)
lines(c(100,200,300,400,500,600), c(0.004, 0.051, 0.173, 0.349, 0.967, 1.598), col=”green”)
legend(0, 0, c(“R”, “Cpp”)
plot(c(100,200,300,400,500,600), c(0.031, 0.189, 0.518, 1.513, 4.465), xlab="Dataset Size", ylab="Seconds(s)", type="l", col="red", main=”Plot for runtimes, R vs Cpp”)
plot(c(100,200,300,400,500,600), c(0.031, 0.189, 0.518, 1.513, 4.465), xlab="Dataset Size", ylab="Seconds(s)", type="l", col="red", main="Plot of Runtimes, R vs Cpp"
)
plot(c(100,200,300,400,500,600), c(0.031, 0.189, 0.518, 1.513, 4.465, 8.797), xlab="Dataset Size", ylab="Seconds(s)", type="l", col="red", main="Plot of runtimes, R vs Cpp")
lines(c(100,200,300,400,500,600), c(0.004, 0.051, 0.173, 0.349, 0.967, 1.598), col="green")
legend(0, 0, c("R", "Cpp")
)
legend(8, 100, c("R", "Cpp")
)
plot(c(100,200,300,400,500,600), c(0.031, 0.189, 0.518, 1.513, 4.465, 8.797), xlab="Dataset Size", ylab="Seconds(s)", type="l", col="red", main="Plot of runtimes, R vs Cpp")
legend(8, 100, c("R", "Cpp"))
legend(100, 8, c("R", "Cpp"))
legend(100, 8, c("R", "Cpp"), c(1,2,3))
plot(c(100,200,300,400,500,600), c(0.031, 0.189, 0.518, 1.513, 4.465, 8.797), xlab="Dataset Size", ylab="Seconds(s)", type="l", col="red", main="Plot of runtimes, R vs Cpp")
lines(c(100,200,300,400,500,600), c(0.004, 0.051, 0.173, 0.349, 0.967, 1.598), col="green")
legend(100, 8, c("R", "Cpp"), c(1,2,3))
legend(100, 8, c("R", "Cpp"), c(2,4))
legend(100, 8, c("R", "Cpp"), c(2,6))
legend(100, 8, c("R", "Cpp"), c(2,7))
legend(100, 8, c("R", "Cpp"), c(2,9))
legend(100, 8, c("R", "Cpp"), c(2,3))
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
source('~/Academic/Stats202a/Assignments/A2/sweep.R')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
i = 100
A = matrix(runif(i * i), nrow=i)
A
mySweep(A, 100)
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
Rcpp::sourceCpp('Academic/Stats202a/Assignments/A7/SweepAndQR.cpp')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A2/sweep.R')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
Rcpp::sourceCpp('Downloads/SweepAndQR.cpp')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Academic/Stats202a/Assignments/A7/QR.r')
source('~/Downloads/PCA (1).R')
setwd("Academic/Stats202a/Assignments/A8/")
source('~/Downloads/PCA (1).R')
source('~/Downloads/PCA (1).R')
